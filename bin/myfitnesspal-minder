#!/usr/bin/env python

"""
Quick script to beemind entering at least some meals into MyFitnessPal for the day.
"""

import datetime
import json
import logging
import sys
import os
from collections import defaultdict

import keyring
import myfitnesspal
import requests

# Constants
BEEMINDER_URL  = "https://www.beeminder.com/api/v1"
GOALS_URL      = BEEMINDER_URL + "/users/{bm_username}/goals/{bm_goal_name}.json?auth_token={bm_auth_token}"
DATAPOINTS_URL = BEEMINDER_URL + "/users/{bm_username}/goals/{bm_goal_name}/datapoints.json?auth_token={bm_auth_token}"

logLevel=logging.INFO
if os.environ.get('MFP_MINDER_DEBUG'):
    logLevel=logging.DEBUG
logging.basicConfig(stream=sys.stderr, level=logLevel, format='%(asctime)-15s %(message)s')

mfp_username = os.environ.get('MFP_USERNAME')
mfp_password = os.environ.get('MFP_PASSWORD')
bm_username = os.environ.get('BM_USERNAME')
bm_auth_token = os.environ.get('BM_AUTH_TOKEN')
bm_goal_name = os.environ.get('BM_GOAL')

### Validation

# validate credentials
if None == mfp_username:
    print("Missing MyFitnessPal username\nSet with environment variable MFP_USERNAME")
    sys.exit()
if None == mfp_password:
    print("Missing MyFitnessPal password\nSet with environment variable MFP_PASSWORD")
    sys.exit()
if None == bm_username:
    print("Missing Beeminder username\nSet with environment variable BM_USERNAME")
    sys.exit()
if None == bm_auth_token:
    print("Missing Beeminder auth token\nSet with environment variable BM_AUTH_TOKEN")
    sys.exit()
if None == bm_goal_name:
    print("Missing Beeminder goal name\nSet with environment variable BM_GOAL")
    sys.exit()

# Ensure goal exists
logging.debug("ensure beeminder goal '%s' exists", bm_goal_name)
resp = requests.get(GOALS_URL.format(**locals()))
if not resp.ok:
    print("Beeminder goal seems missing: {}".format(resp))
    sys.exit()

### Main Execution

now = datetime.datetime.now()
todaystamp = now.strftime("%Y%m%d")

# Set up a myfitnesspal API client
client = myfitnesspal.Client(mfp_username, mfp_password)

# Look up myfitnesspal meals entered today
day = client.get_date(now.year, now.month, now.day)
breakfast = day.meals[0]
lunch = day.meals[1]
dinner = day.meals[2]
snacks = day.meals[3]
mfp_entered = 0
if len(breakfast.entries) > 0:
    mfp_entered += 1
if len(lunch.entries) > 0:
    mfp_entered += 1
if len(dinner.entries) > 0:
    mfp_entered += 1
logging.info("meals logged on mfp today (%s): %s", todaystamp, mfp_entered)

# Look up beeminder data points today
results = requests.get(DATAPOINTS_URL.format(**locals())).json()
dps = defaultdict(list)
for dp in results:
    dps[dp["daystamp"]].append(dp)
todays_dps = dps[todaystamp]

if len(todays_dps) == 0:
    logging.info("no data point so far today (%s)", todaystamp)
    logging.info("adding data point '%d' to beeminder goal '%s'", mfp_entered, bm_goal_name)
    requests.post(DATAPOINTS_URL.format(**locals()), data={
        "value": mfp_entered,
        "comment": "via MyFitnessPal scripting on {}".format(now.isoformat())})
else:
    bm_total_value_today = 0
    for dp in todays_dps:
        bm_total_value_today += dp["value"]
    logging.info("beeminder goal '%s' has a total value of %d so far today (%s)", bm_goal_name, bm_total_value_today, todaystamp)
    if mfp_entered > bm_total_value_today:
        missing_meals = mfp_entered - bm_total_value_today
        logging.info("adding data point '%d' to beeminder goal '%s'", missing_meals, bm_goal_name)
        requests.post(DATAPOINTS_URL.format(**locals()), data={
            "value": missing_meals,
            "comment": "via MyFitnessPal scripting on {}".format(now.isoformat())})
    else:
        logging.info("values in mfp and beeminder match, not doing anything")